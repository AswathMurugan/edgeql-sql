using extension pg_trgm version '1.6';
module default{};
module wealthdomain {

    type AcHCreateResponse {
        property requestId: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type Account {
        index fts::index on ((fts::with_options(.name, language := fts::Language.eng), fts::with_options(.accountNumber, language := fts::Language.eng)));
        link accountCommunicationPreferences: wealthdomain::AccountCommunicationPreference {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link accountCreationDetail: wealthdomain::AccountCreationDetail {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link accountFeatures: wealthdomain::AccountFeatures {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link annuityDetails: wealthdomain::AnnuityDetails {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link assets: wealthdomain::Assets {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link associates: wealthdomain::AccountAssociate {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link beneficiaries: wealthdomain::Beneficiary {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link branch: wealthdomain::Branch {
            on target delete allow;
        };
        multi link cashFlow := (.<account[is wealthdomain::CashFlow]);
        link client: wealthdomain::Client {
            on target delete allow;
        };
        multi link collateral: wealthdomain::Collateral {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link contingentBeneficiaries: wealthdomain::Beneficiary {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link custodian: wealthdomain::Custodian {
            on target delete allow;
        };
        link custodianForMinor: wealthdomain::AccountInterestedParties {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link dailyBalances: wealthdomain::AccountBalances {
            on target delete allow;
            constraint std::exclusive;
        };
        multi link documents: wealthdomain::Document {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link employerContact: wealthdomain::AccountInterestedParties {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link feeSchedule: wealthdomain::FeeSchedule {
            on target delete allow;
        };
        link governingStateLawForCustodialAccount: wealthdomain::StateOrProvince {
            on target delete allow;
        };
        multi link holdings: wealthdomain::Holdings {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link interestedParties: wealthdomain::AccountInterestedParties {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link intraDayBalances: wealthdomain::AccountBalances {
            on target delete allow;
            constraint std::exclusive;
        };
        link irADistributionInstructions: wealthdomain::Transfer {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link irAFinancialInstitution: wealthdomain::FinancialInstitution {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link jointTenancyState: wealthdomain::StateOrProvince {
            on target delete allow;
        };
        multi link liabilities: wealthdomain::Liabilities {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link marginRates: wealthdomain::MarginRates {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link notices: wealthdomain::AccountNotice {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link originalDepositor: wealthdomain::AccountInterestedParties {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link ouLevel0: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel1: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel2: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel3: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel4: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel5: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel6: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        multi link positions := (.<account[is wealthdomain::Position]);
        link precedingOwner: wealthdomain::AccountInterestedParties {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link primaryOwner: wealthdomain::AccountOwnership {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link product: wealthdomain::Product {
            on target delete allow;
        };
        link registrationType: wealthdomain::RegistrationType {
            on target delete allow;
        };
        multi link regulatoryDisclosures: wealthdomain::RegulatoryDisclosure {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link relatedAccounts: wealthdomain::AccountRelation {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link repCodeLink: wealthdomain::RepCode {
            on target delete allow;
        };
        link responsibleIndividualForMaintainingStirp: wealthdomain::AccountInterestedParties {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link retirementPlanSumamry := (.<account[is wealthdomain::RetirementPlanSummary]);
        multi link secondaryOwners: wealthdomain::AccountOwnership {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link statementSchedule: wealthdomain::AccountStatementSchedule {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link taxLots := (.<account[is wealthdomain::TaxLot]);
        multi link transfers: wealthdomain::Transfer {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        property accountCustodianStatus: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property accountIsSetUpForEDelivery: std::bool;
        property accountManagementType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property accountNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property accountPrefix: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property accountStatus: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property acknowledgeIlliquidInvestment: std::bool;
        property advisorTradingDiscretion: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property ageOfTerminationOfCustody: std::int64;
        property allowedWithdrawalPercentage: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property allowedYear1WithdrawalPercentage: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property allowsSpeculation: std::bool;
        property annualExpenses: std::float64;
        property annualIncome: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property annualIncomeExact: std::float64;
        property availableCredit: std::float64;
        property balance: std::float64;
        property balanceAsOfDate: cal::local_date;
        property branchOrOfficeID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property cashDividendOption: std::str {
            constraint std::max_len_value(40);
            constraint std::min_len_value(0);
        };
        property chargeInterestOnWithdrawal: std::bool;
        property closureDate: cal::local_date;
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property custodialAccountType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property dayOfMonthPaymentIsDue: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property dividendReinvestmentOption: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property employeeAffiliationType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property employerPlanAccountNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property estimatedValueOfInvestments: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property federalMarginalTaxRate: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property financialInformationIsForEntireHousehold: std::bool;
        property firmID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property frequency: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property guaranteedYield: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property hsAContributionLimits: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property includePrimeBrokerage: std::bool;
        property inheritedIRADistributionOption: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property initialFundingSource: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        multi property initialFundingSources: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property interestAccrualInterval: std::int64;
        property interestAccrualMethod: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property interestAccrualMinimumBalance: std::int64;
        property interestAccrualMinimumBalanceAccountingM: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property interestAccrualSchedule: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property interestOnWithdrawalIsCumulative: std::bool;
        property interestRate: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property interestRateBonus: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property interestRateID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property investmentExperience: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property investmentObjective: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property irABeneficiaryType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property irAContributionType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property irADirectBeneficiaryIsSpouse: std::bool;
        property irADirectBeneficiaryOrSuccessor: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property irAEligibleDesignatedBeneficiaryReason: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property irAExistingAccountFees: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property irAFundingSource: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property irAOriginalAccountConversionDate: cal::local_date;
        property irAOriginalAccountMostRecentStatement: std::str {
            constraint std::max_len_value(2096);
        };
        property irAOriginalAccountNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property irAOriginalAccountType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property irARecommendedAccountFees: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property irARolloverComments: std::str {
            constraint std::max_len_value(2000);
            constraint std::min_len_value(0);
        };
        property irARolloverDecision: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property irARolloverInvestments: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property irARolloverRationale: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property irARolloverServices: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property irATypeOfOwnership: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property isAccountForAForeignBank: std::bool;
        property isAccountForPrivateBanking: std::bool;
        property isEmployeeAccount: std::bool;
        property isExternal: std::bool;
        property isForeign: std::bool;
        property isInstitutionalAccount: std::bool;
        property isManaged: std::bool;
        property isMasterAccount: std::bool;
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastPaymentAmount: std::float64;
        property lastPaymentDate: cal::local_date;
        property lastStatementDate: cal::local_date;
        property liquidAssets: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property liquidAssetsExact: std::float64;
        property liquidityNeeds: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property liquidityPreference: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property liquiditySufficientForAYear: std::bool;
        property marginInterestDelta: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'-100');
        };
        property marginInterestMaximum: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property marginInterestMinimum: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property marginInterestRate: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property marginNote: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property maturityDate: cal::local_date;
        property moneyFundSweepOptIn: std::bool;
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property netWorthExcludingHome: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property netWorthExcludingHomeExact: std::float64;
        property nextAmountDue: std::float64;
        property nextDueDate: cal::local_date;
        property nextMinimumAmountDue: std::float64;
        property nickName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property optionsRiskLevel: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property otherInitialFundingSource: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property premium: std::float64;
        property rateGuaranteedYears: std::int64;
        property recordSource: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property recordSourceApplication: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property reinvestDividendsFromAllEligibleSecuriti: std::bool;
        property reinvestDividendsFromMutualFunds: std::bool;
        property reinvestDividendsFromNone: std::bool;
        property reinvestDividendsFromSecuritiesOnly: std::bool;
        property repCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property riskTolerance: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property saleCostBasisMethod: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property salesProceedsDistribution: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property sePIRAContributor: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property sePIRAEmployeeMinimumAge: std::int64;
        property sePIRAEmployeeMinimumEmploymentYears: std::int64;
        property sePIRAIncludeCertainNonResidentAliens: std::bool;
        property sePIRAIncludeCollectiveBargaining: std::bool;
        property sePIRAIncludeEmployeesUnder450: std::bool;
        multi property securityRestrictions: std::str;
        property shareOwnerInformationWithOwnedCorporatio: std::bool;
        property siMPLEIRAAdditionalSalaryReductionElecti: std::bool;
        property siMPLEIRACurrentMinimumCompensation: std::float64;
        property siMPLEIRAEmployeeMayTerminateSalaryReduc: std::bool;
        property siMPLEIRAEmployerContributionPercentage: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property siMPLEIRAEmployerContributionYear: std::str {
            constraint std::max_len_value(4);
            constraint std::min_len_value(0);
            constraint std::regexp(r'\d{4}');
        };
        property siMPLEIRAEmployerContributions: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property siMPLEIRAEmployerNonElectiveContribution: std::float64;
        property siMPLEIRAExcludeEmployeesCoveredByCollec: std::bool;
        property siMPLEIRAGeneralEligibilityRequirement: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property siMPLEIRAPriorCompensationYears: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property siMPLEIRAPriorMinimumCompensation: std::float64;
        property siMPLEIRASalaryReductionAgreementReceM7iqk: cal::local_date;
        property siMPLEIRASalaryReductionAgreementReceive: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property siMPLEIRASalaryReductionAmount: std::float64;
        property siMPLEIRASalaryReductionAmountChoice: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        multi property siMPLEIRASalaryReductionElectionFrequenc: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property siMPLEIRASalaryReductionPercentage: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property siMPLEIRASalaryReductionStartDate: cal::local_date;
        property specialExpenses: std::float64;
        property specialExpensesTimeframe: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property startDate: cal::local_date;
        property subType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property suitabilityLetterDate: cal::local_date;
        property termInMonths: std::int64;
        property timeHorizon: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property totalAssets: std::float64;
        property totalLiabilities: std::float64;
        property tradingPrivilege: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        multi property tradingPrivileges: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property type: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property wantBeneficiaries: std::bool;
    };
    type AccountActivitiesResponse {
        property accountNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property insertTime: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property messages: std::str {
            constraint std::max_len_value(2000);
            constraint std::min_len_value(0);
        };
        property requestId: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property sequence: std::int64;
        property status: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type AccountAssociate {
        link associate: wealthdomain::Associate {
            on target delete allow;
            constraint std::exclusive;
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property relationshipCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property relationshipType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type AccountBalances {
        link account: wealthdomain::Account {
            on target delete allow;
        };
        link cashAccountSymbol: wealthdomain::Security {
            on target delete allow;
        };
        property accruedDividends: std::float64;
        property accruedInterestPurchases: std::float64;
        property accruedInterestSales: std::float64;
        property accumulatedFedCall: std::float64;
        property availableFundsToWithdraw: std::float64;
        property beginningBalance: std::float64;
        property beginningBuyingPower: std::float64;
        property beginningCashBalance: std::float64;
        property beginningMarginBalance: std::float64;
        property beginningMarketValue: std::float64;
        property beginningMoneyMarketBalance: std::float64;
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property cashAccountCashAvailable: std::float64;
        property cashAccountMarginValue: std::float64;
        property cashAccountMarketValue: std::float64;
        property cashManagementDDANumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property commission: std::float64;
        property contributions: std::float64;
        property corporateInterest: std::float64;
        property creditInterest: std::float64;
        property dayTradeBuyingPower: std::float64;
        property endingBalance: std::float64;
        property endingBuyingPower: std::float64;
        property endingCashBalance: std::float64;
        property endingMarginBalance: std::float64;
        property endingMarketValue: std::float64;
        property endingMoneyMarketBalance: std::float64;
        property fedCall: std::float64;
        property fundsFrozenForChecks: std::float64;
        property governmentInterest: std::float64;
        property houseCall: std::float64;
        property intraDayTimestamp: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property liquidationValue: std::float64;
        property longMarketValue: std::float64;
        property longTermCapitalGains: std::float64;
        property maintenanceCall: std::float64;
        property marginAccountCashAvailable: std::float64;
        property marginEquityAmount: std::float64;
        property marginEquityPercent: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property marketAppreciation: std::float64;
        property miscellaneousCreditOrDebit: std::float64;
        property moneyMarketInterest: std::float64;
        property municipalInterestTax: std::float64;
        property nonQualifiedDividends: std::float64;
        property otherIncome: std::float64;
        property partnershipDistributions: std::float64;
        property periodEndDate: cal::local_date;
        property periodStartDate: cal::local_date;
        property periodType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property previousAuthorizationLimit: std::float64;
        property principalPayments: std::float64;
        property qualifiedDividends: std::float64;
        property recentDeposits: std::float64;
        property recordSource: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property regulationTBuyingPower: std::float64;
        property repurchaseInterest: std::float64;
        property returnOfCapital: std::float64;
        property royaltyPayments: std::float64;
        property settlementDateBalance: std::float64;
        property settlementDateCashBalance: std::float64;
        property settlementDateFeeBalance: std::float64;
        property settlementDateMarginBalance: std::float64;
        property settlementDateShortBalance: std::float64;
        property shortMarketValue: std::float64;
        property shortTermCapitalGains: std::float64;
        property smABalance: std::float64;
        property substitutePayments: std::float64;
        property tradeDateBalance: std::float64;
        property tradeDateCashBalance: std::float64;
        property tradeDateMarginBalance: std::float64;
        property tradeDateShortBalance: std::float64;
        property withdrawals: std::float64;
    };
    type AccountBuilder {
        link accountType: wealthdomain::Category {
            on target delete allow;
        };
        multi link documents: wealthdomain::Document {
            on target delete allow;
            constraint std::exclusive;
        };
        link primaryOwner: wealthdomain::Person {
            on target delete allow;
        };
        link productCategory: wealthdomain::ProductCategory {
            on target delete allow;
        };
        link registrationType: wealthdomain::RegistrationType {
            on target delete allow;
        };
        link repCode: wealthdomain::RepCode {
            on target delete allow;
        };
        multi link secondaryOwners: wealthdomain::Person {
            on target delete allow;
            constraint std::exclusive;
        };
        multi link secondaryOwnersV2: wealthdomain::Person {
            on target delete allow;
        };
        property accountManagementType: std::str {
            default := 'Brokerage';
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::one_of('Brokerage', 'Managed');
        };
        property isAccountForiegn: std::bool {
            default := false;
        };
        property isInstitutionalAccount: std::bool;
        property isManaged: std::bool {
            default := false;
        };
        property wantToAddBeneficiaries: std::bool;
    };
    type AccountCommunicationPreference {
        property additionalMailings: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property annualReports: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property communicationsTypes: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property corporateActions: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property deliveryOptions: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property proxies: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type AccountCreation {
        link category: wealthdomain::Category {
            on target delete allow;
            constraint std::exclusive;
        };
        link primaryOwner: wealthdomain::Person {
            on target delete allow;
            constraint std::exclusive;
        };
        link registrationType: wealthdomain::RegistrationType {
            on target delete allow;
            constraint std::exclusive;
        };
        multi link secondaryOwners: wealthdomain::Person {
            on target delete allow;
            constraint std::exclusive;
        };
        property isManaged: std::bool;
    };
    type AccountCreationDetail {
        multi link documents: wealthdomain::Document {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link initialFundingCurrency: wealthdomain::Currency {
            on target delete allow;
        };
        multi link onlineAccountSetup: wealthdomain::OnlineAccountSetup {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link signatures: wealthdomain::Signature {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link sourceOfFunds: wealthdomain::AccountSourceOfFunds {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        property accountNumberNotAvailable: std::bool;
        property applicationDate: cal::local_date;
        property applicationNumber: wealthdomain::AccountCreationDetail_applicationNumber_sequence;
        property beneficiarysAccountNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property esignatureEnvelopeID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property ibDToInitiateTransfer: std::bool;
        property initialFunding: std::float64;
        property offerExpiresSoon: std::bool;
        property rateChangeExpectedSoon: std::bool;
        property setupOnlineOrEDeliveryOfStatements: std::bool;
        property statusScore: std::int64;
        property statusScoreMaximum: std::int64;
        property statusScorePercentage := (((.statusScore * 100) / .statusScoreMaximum));
        property transferEtsToIRA: std::bool;
        property transferToBDAInIRAApplication: std::bool;
        property useBeneficiarysAccount: std::bool;
        property welcomeLetterDate: cal::local_date;
    };
    type AccountCreationStatusResponse {
        property accountNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property messages: std::str {
            constraint std::max_len_value(2000);
            constraint std::min_len_value(0);
        };
        property requestId: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property sequence: std::int64;
        property status: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property timestamp: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
    };
    type AccountCreationStep {
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type AccountDataMapper {
        multi link steps: wealthdomain::AccountCreationStep {
            on target delete allow;
            constraint std::exclusive;
        };
        property stepNames: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type AccountDueDiligenceOptions {
        link expectedFundingMethod: wealthdomain::FundingMethodTypes {
            on target delete allow;
        };
        property expectInternationalTravel: std::bool;
        property expectInternationalWires: std::bool;
        property expectMobileDeposit: std::bool;
        property expectSafeDepositBox: std::bool;
    };
    type AccountFeatures {
        link owner: wealthdomain::Person {
            on target delete allow;
            constraint std::exclusive;
        };
        link product: wealthdomain::Product {
            on target delete allow;
        };
        property accountPrefix: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property shortName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property title: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type AccountInterestedParties {
        link party: wealthdomain::Person {
            on target delete allow;
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        multi property documentDelivery: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property relationshipToPrimary: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property relationshipType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type AccountMessages {
        link parentId: wealthdomain::Account {
            on target delete allow;
        };
        property additionalParameters: std::str;
        property message: std::str;
        property messageType: std::str;
        property parentMessageId: std::int64;
    };
    type AccountNotice {
        property noticeType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property noticeValue: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type AccountOwnership {
        link alternateMailingAddress: wealthdomain::Address {
            on target delete allow;
            constraint std::exclusive;
        };
        link dueDiligenceOptions: wealthdomain::AccountDueDiligenceOptions {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link legalAddress: wealthdomain::Address {
            on target delete allow;
            constraint std::exclusive;
        };
        link mailingAddress: wealthdomain::Address {
            on target delete allow;
            constraint std::exclusive;
        };
        link owner: wealthdomain::Person {
            on target delete allow;
        };
        link previousLegalAddress: wealthdomain::Address {
            on target delete allow;
            constraint std::exclusive;
        };
        link trustedContact: wealthdomain::Person {
            on target delete allow;
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property isAddressSameAsPrimaryClient: std::bool;
        property lastKYCDate: cal::local_date;
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property legalAddressStartDate: cal::local_date;
        property ownerType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property percentage: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property relationshipToAccount: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property relationshipToOwner: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property sendTaxDocumentsToAlternateAddress: std::bool;
        property spouseIsAJointOwner: std::bool;
        property trustedContactInfoDeclined: std::bool;
        property trustedContactRelationship: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type AccountPrefixSettings {
        property accountType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property brokeragePrefix: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property managedAccountPrefix: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property state: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type AccountRelation {
        link linkedAccounts: wealthdomain::Account {
            on target delete allow;
            constraint std::exclusive;
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property relationship: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type AccountSourceOfFunds {
        link bankAddress: wealthdomain::Address {
            on target delete allow;
        };
        link fundingMethod: wealthdomain::FundingMethodTypes {
            on target delete allow;
        };
        link intermediaryBankAddress: wealthdomain::Address {
            on target delete allow;
        };
        link payeeAddress: wealthdomain::Address {
            on target delete allow;
        };
        link transfer: wealthdomain::Transfer {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        property additionalInformation: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property administratorName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property administratorPhoneNumber: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property amount: std::float64;
        property bankAccountHasOtherOwners: std::bool;
        property bankAccountNickname: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bankAccountNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bankAccountNumbers: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bankAccountTitle: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bankAccountTransferType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bankAccountType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bankBranch: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bankName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property cdMaturityDate: cal::local_date;
        property checkIncluded: std::bool;
        property checkNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::regexp(r'^\d*$');
        };
        property closeAccount: std::bool;
        property costBasisStepUp: std::bool;
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property firmName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property ibANCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::regexp('^[A-Z0-9]*$');
        };
        property intermediaryBank: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property intermediaryBankAccountNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property isForeignBank: std::bool;
        property isSolicitedRollover: std::bool;
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property otherOwnerEmail: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
            constraint std::regexp(r"^[a-zA-Z0-9.!#$%&'*+\=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$");
        };
        property otherOwnerName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property partialTransferAmount: std::float64;
        property payeePhoneNumber: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property replaceExistingInstruction: std::bool;
        property rmDStatus: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property routingNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::regexp(r'\d{9}');
        };
        property securitiesTransferType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property sourceIRAAccountType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property sourceOfFunds: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::one_of('Transfer from Another Account', 'Gift', 'Income', 'Investment', 'IRA Rollover', 'Qualified Plan Rollover', 'Business', 'Settlement', 'Other', 'Business Revenue', 'Compensation', 'Donation', 'Inheritance', 'Insurance Payments', 'Legal Settlement', 'Lottery / Gaming', 'Retirement Assets', 'Sale of Business or Property', 'Social Security Benefits', 'Spouse / Parents');
        };
        property swIFTCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::regexp('^[A-Z0-9]*$');
        };
    };
    type AccountStatementSchedule {
        multi property alternateStatementOptions: std::str;
        property isAlternateSchedule: std::bool;
        property recurrenceInterval: std::int64;
        property recurrenceType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type Address {
        link country: wealthdomain::Country {
            on target delete allow;
        };
        link state: wealthdomain::StateOrProvince {
            on target delete allow;
        };
        property addressProof: std::str {
            constraint std::max_len_value(2096);
        };
        property addressType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property addressUsage: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property attentionLine: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property attentionLinePrefix: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::one_of('ATTN', 'C/O');
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property city: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property isUSAddress: std::bool {
            default := true;
        };
        property line1: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property line2: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property line3: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property line4: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property postalCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::regexp('[0-9A-Z -]');
        };
        property providerAssignedID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property requiresAdditionalPostage: std::bool;
        property stateOrProvince: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property useEndDate: cal::local_date;
        property useStartDate: cal::local_date;
    };
    type AdvisorAccountBalances {
        link advisor: wealthdomain::Associate {
            on target delete allow;
        };
        property beginningAccounts: std::int64;
        property beginningBuyingPower: std::float64;
        property beginningCashBalance: std::float64;
        property beginningEts: std::float64;
        property beginningMarginBalance: std::float64;
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property closedAccounts: std::int64;
        property contributions: std::float64;
        property endingAccounts: std::int64;
        property endingBuyingPower: std::float64;
        property endingCashBalance: std::float64;
        property endingEts: std::float64;
        property endingMarginBalance: std::float64;
        property marketAppreciation: std::float64;
        property newAccounts: std::int64;
        property periodEndDate: cal::local_date;
        property periodStartDate: cal::local_date;
        property periodType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property withdrawals: std::float64;
    };
    type AdvisorPositions {
        link advisor: wealthdomain::Associate {
            on target delete allow;
        };
        link security: wealthdomain::Security {
            on target delete allow;
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property marketValue: std::float64;
        property numberOfAccounts: std::int64;
        property numberOfShares: std::int64;
        property periodEndDate: cal::local_date;
    };
    type AggregatePositions {
        link advisor: wealthdomain::Associate {
            on target delete allow;
        };
        link client: wealthdomain::Client {
            on target delete allow;
        };
        link orgUnit: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link security: wealthdomain::Security {
            on target delete allow;
        };
        property aggregateType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property marketValue: std::float64;
        property numberOfAccounts: std::int64;
        property numberOfShares: std::int64;
        property periodEndDate: cal::local_date;
    };
    type Announcement {
        multi link files: wealthdomain::Document {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link orgUnit: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        property audience: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property display: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property displayEndDate: cal::local_date;
        property displayStartDate: cal::local_date;
        property effectiveDate: cal::local_date;
        property expiryDate: cal::local_date;
        property message: std::str {
            constraint std::max_len_value(2000);
            constraint std::min_len_value(0);
        };
        property noticeNumber: wealthdomain::Announcement_noticeNumber_sequence;
        property subject: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type AnnuityDetails {
        multi link creditingStrategies: wealthdomain::IndexedAnnuityCreditingStrategy {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link product: wealthdomain::Product {
            on target delete allow;
        };
        multi link riders: wealthdomain::Product {
            on target delete allow;
        };
        property acknowledgeIlliquidInvestment: std::bool;
        property allowedWithdrawalPercentage: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property allowedYear1WithdrawalPercentage: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property chargeInterestOnWithdrawal: std::bool;
        property disclosureRequirementsMet: std::bool;
        property effectiveDate: cal::local_date;
        property guaranteedYield: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property interestOnWithdrawalIsCumulative: std::bool;
        property interestRate: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property interestRateBonus: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property interestRateTotal: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property isReplacement: std::bool;
        property liquiditySufficientForAYear: std::bool;
        property premium: std::float64;
        property rateGuaranteedYears: std::int64;
        property recentAnnuityExchange: std::bool;
        property recentInvestmentActivity: std::bool;
        multi property surrenderChargesByYear: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property surrenderYears: std::int64;
        property timeHorizon: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property type: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property withdrawalWindowDays: std::int64;
        property withdrawalWindowYear: std::int64;
    };
    type Assets {
        property type: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property value: std::float64;
    };
    type Associate {
        link address: wealthdomain::Address {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link canAccessOrgUnits: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        multi link canAccessOrgUnitsAtOrBelow: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link orgUnit: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel0: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel1: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel2: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel3: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel4: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel5: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel6: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        multi link repCodes: wealthdomain::RepCode {
            on target delete allow;
        };
        property alternateEmail: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
            constraint std::regexp(r"^[a-zA-Z0-9.!#$%&'*+\=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$");
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property employer: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property firstName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::regexp("^[a-zA-Z'.-]*$");
        };
        property fullDisplayName := ((((.firstName ?? '') ++ ((' ' ++ .middleName) ?? '')) ++ ((' ' ++ .lastName) ?? '')));
        property idCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property lastName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::regexp("^[a-zA-Z'.-]*$");
        };
        property middleName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::regexp("^[a-zA-Z'.-]*$");
        };
        property primaryEmail: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
            constraint std::regexp(r"^[a-zA-Z0-9.!#$%&'*+\=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$");
        };
        property primaryPhoneNumber: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property recordSource: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property secondaryPhoneNumber: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property userID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property userName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type AuditErrorLogs {
        property createdDate: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdUser: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property lastModifiedDate: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property logStatus: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property recordStatus: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property recordUUID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type BalancesResponse {
        multi link balances: wealthdomain::AccountBalances {
            on target delete allow;
            constraint std::exclusive;
        };
        multi link positions: wealthdomain::Position {
            on target delete allow;
            constraint std::exclusive;
        };
    };
    type Bank {
        property bankCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property domesticWireRoutingNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property fax: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property idBIGA: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property internationalWireRoutingNumber: std::int64;
        property primaryPhoneNumber: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property secondaryPhoneNumber: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property swiftCode: std::int64;
    };
    type Beneficiary {
        link beneficiary: wealthdomain::Person {
            on target delete allow;
        };
        link trustedContact: wealthdomain::Person {
            on target delete allow;
        };
        property beneficiaryType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property isContingentBeneficiary: std::bool;
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property orderOfThisBeneficiary: std::int64;
        property perStirM7iqk: std::bool;
        property perStirpes: std::bool;
        property percentage: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property relationship: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property rmDOption: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type Branch {
        link address: wealthdomain::Address {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link branchManager: wealthdomain::Associate {
            on target delete allow;
        };
        link organizationalUnit: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link parent: wealthdomain::FinancialInstitution {
            on target delete allow;
        };
        property branchBillingCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property branchCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property branchName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property fax: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property primaryPhoneNumber: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property region: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property regionCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property secondaryPhoneNumber: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
    };
    type CashFlow {
        link account: wealthdomain::Account {
            on target delete allow;
        };
        property accruedInterestPurchaseMTD: std::float64;
        property accruedInterestPurchaseYTD: std::float64;
        property accruedInterestSalesMTD: std::float64;
        property accruedInterestSalesYTD: std::float64;
        property asOfDate: cal::local_date;
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property corporateInterestMTD: std::float64;
        property corporateInterestYTD: std::float64;
        property creditInterestMTD: std::float64;
        property creditInterestYTD: std::float64;
        property governmentInterestMTD: std::float64;
        property governmentInterestYTD: std::float64;
        property liquidationsMTD: std::float64;
        property liquidationsYTD: std::float64;
        property longTermCapitalGainJe4tn2juge: std::float64;
        property longTermCapitalGainsM7iqk: std::float64;
        property longTermCapitalGainsMTD: std::float64;
        property longTermCapitalGainsYTD: std::float64;
        property moneyMarketMTD: std::float64;
        property moneyMarketYTD: std::float64;
        property municipalInterestTaxMTD: std::float64;
        property municipalInterestTaxYTD: std::float64;
        property nonQualifiedDividendsMTD: std::float64;
        property nonQualifiedDividendsYTD: std::float64;
        property otherIncomeMTD: std::float64;
        property otherIncomeYTD: std::float64;
        property partnershipDistributionsJe4tm: std::float64;
        property partnershipDistributionsMTD: std::float64;
        property partnershipDistributionsY7sc6: std::float64;
        property partnershipDistributionsYTD: std::float64;
        property principalPaymentsMTD: std::float64;
        property principalPaymentsYTD: std::float64;
        property qualifiedDividendsMTD: std::float64;
        property qualifiedDividendsYTD: std::float64;
        property repurchaseInterestMTD: std::float64;
        property repurchaseInterestYTD: std::float64;
        property returnOfCapitalMTD: std::float64;
        property returnOfCapitalROCMTD: std::float64;
        property returnOfCapitalROCYTD: std::float64;
        property returnOfCapitalYTD: std::float64;
        property royaltyPaymentsMTD: std::float64;
        property royaltyPaymentsYTD: std::float64;
        property shortTermCapitalGainsMTD: std::float64;
        property shortTermCapitalGainsYTD: std::float64;
        property substitutePaymentsMTD: std::float64;
        property substitutePaymentsYTD: std::float64;
        property totalIncomeMTD := ((((((((((((((((((((.nonQualifiedDividendsMTD ?? 0) + (.qualifiedDividendsMTD ?? 0)) + (.shortTermCapitalGainsMTD ?? 0)) + (.longTermCapitalGainsMTD ?? 0)) + (.returnOfCapitalMTD ?? 0)) + (.liquidationsMTD ?? 0)) + (.partnershipDistributionsMTD ?? 0)) + (.principalPaymentsMTD ?? 0)) + (.substitutePaymentsMTD ?? 0)) + (.royaltyPaymentsMTD ?? 0)) + (.municipalInterestTaxMTD ?? 0)) + (.corporateInterestMTD ?? 0)) + (.governmentInterestMTD ?? 0)) + (.accruedInterestPurchaseMTD ?? 0)) + (.accruedInterestSalesMTD ?? 0)) + (.moneyMarketMTD ?? 0)) + (.creditInterestMTD ?? 0)) + (.repurchaseInterestMTD ?? 0)) + (.otherIncomeMTD ?? 0)));
        property totalIncomeYTD := (((((((((((((((((((((.nonQualifiedDividendsYTD ?? 0) + (.qualifiedDividendsYTD ?? 0)) + (.shortTermCapitalGainsYTD ?? 0)) + (.longTermCapitalGainsYTD ?? 0)) + (.returnOfCapitalYTD ?? 0)) + (.liquidationsYTD ?? 0)) + (.partnershipDistributionsYTD ?? 0)) + (.principalPaymentsYTD ?? 0)) + (.substitutePaymentsYTD ?? 0)) + (.royaltyPaymentsYTD ?? 0)) + (.municipalInterestTaxYTD ?? 0)) + (.corporateInterestYTD ?? 0)) + (.governmentInterestYTD ?? 0)) + (.accruedInterestPurchaseYTD ?? 0)) + (.accruedInterestSalesYTD ?? 0)) + (.corporateInterestMTD ?? 0)) + (.moneyMarketYTD ?? 0)) + (.creditInterestYTD ?? 0)) + (.repurchaseInterestYTD ?? 0)) + (.otherIncomeYTD ?? 0)));
    };
    type Category {
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type Client {
        index fts::index on (fts::with_options(.clientName, language := fts::Language.eng));
        multi link accountClient := (.<client[is wealthdomain::Account]);
        multi link additionalMembers: wealthdomain::Person {
            on target delete allow;
            constraint std::exclusive;
        };
        multi link financialGoals: wealthdomain::FinancialGoal {
            on target delete allow;
            constraint std::exclusive;
        };
        multi link investmentGoals: wealthdomain::FinancialGoal {
            on target delete allow;
            constraint std::exclusive;
        };
        link primaryMember: wealthdomain::Person {
            on target delete allow;
            constraint std::exclusive;
        };
        property annualIncome: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property annualIncomeExact: std::float64;
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property clientName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property federalMarginalTaxRate: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property liquidAssets: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property liquidAssetsExact: std::float64;
        property netWorthExcludingHome: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property netWorthExcludingHomeExact: std::float64;
        property rating: std::int64;
        property repCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property totalAssets: std::float64;
        property totalLiabilities: std::float64;
        property totalNetWorth := ((.totalAssets - .totalLiabilities));
        property type: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type ClientAccountBalances {
        link advisor: wealthdomain::Associate {
            on target delete allow;
        };
        link client: wealthdomain::Client {
            on target delete allow;
        };
        property beginningAccounts: std::int64;
        property beginningBuyingPower: std::float64;
        property beginningCashBalance: std::float64;
        property beginningEts: std::float64;
        property beginningMarginBalance: std::float64;
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property closedAccounts: std::int64;
        property contributions: std::float64;
        property endingAccounts: std::int64;
        property endingBuyingPower: std::float64;
        property endingCashBalance: std::float64;
        property endingEts: std::float64;
        property endingMarginBalance: std::float64;
        property marketAppreciation: std::float64;
        property newAccounts: std::int64;
        property periodEndDate: cal::local_date;
        property periodStartDate: cal::local_date;
        property periodType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property withdrawals: std::float64;
    };
    type ClientMember {
        link member: wealthdomain::Person {
            on target delete allow;
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property j_Primary: std::bool;
        property relationship: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type ClientPositions {
        link advisor: wealthdomain::Associate {
            on target delete allow;
        };
        link client: wealthdomain::Client {
            on target delete allow;
        };
        link security: wealthdomain::Security {
            on target delete allow;
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property marketValue: std::float64;
        property numberOfAccounts: std::int64;
        property numberOfShares: std::int64;
        property periodEndDate: cal::local_date;
    };
    type Collateral {
        link loan: wealthdomain::Account {
            on target delete allow;
            constraint std::exclusive;
        };
        property code: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property isReleased: std::bool;
        property priority: std::int64;
        property serialNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property type: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type Commissions {
        link associate: wealthdomain::Associate {
            on target delete allow;
        };
        multi link commissionsByProduct: wealthdomain::CommissionsByProduct {
            on target delete allow;
            constraint std::exclusive;
        };
        link exchange: wealthdomain::Exchange {
            on target delete allow;
        };
        link product: wealthdomain::Product {
            on target delete allow;
        };
        property asOfDate: cal::local_date;
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property commissions: std::float64;
        property commissionsMTD: std::float64;
        property commissionsYTD: std::float64;
        property tickets: std::float64;
        property ticketsMTD: std::float64;
        property ticketsYTD: std::float64;
    };
    type CommissionsByProduct {
        link exchange: wealthdomain::Exchange {
            on target delete allow;
        };
        link product: wealthdomain::Product {
            on target delete allow;
        };
        property asOfDate: cal::local_date;
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property commissions: std::float64;
        property commissionsMTD: std::float64;
        property commissionsYTD: std::float64;
        property tickets: std::int64;
        property ticketsMTD: std::int64;
        property ticketsYTD: std::int64;
    };
    type ConfigSchema {
        required property settingName: std::str {
            constraint std::exclusive;
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property settingValue: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type Country {
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property code2Letters: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::regexp('[A-Z]');
        };
        property code3Letters: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::regexp('[A-Z]');
        };
        property fullName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property shortName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property sortOrder: std::int64;
    };
    type CreateAccountResponse {
        property accountId: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property requestId: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property statusMsg: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type Currency {
        property alphabeticCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::regexp('[A-Z]');
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property countryCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property issuingEntity: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property minorUnits: std::int64;
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property numericCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::regexp('[0-9]');
        };
        property sortOrder: std::int64;
        property symbol: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type Custodian {
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property code: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type Customemail {
        multi property attachments: std::str;
        property bcc: std::str {
            constraint std::min_len_value(0);
        };
        property cc: std::str {
            constraint std::min_len_value(0);
        };
        property emailpriority: std::str;
        property htmlBody: std::str {
            constraint std::min_len_value(0);
        };
        property providerName: std::str {
            constraint std::min_len_value(0);
        };
        property subject: std::str {
            constraint std::min_len_value(0);
        };
        property textBody: std::str {
            constraint std::min_len_value(0);
        };
        property to: std::str {
            constraint std::min_len_value(0);
        };
    };
    type Document {
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property document: std::str {
            constraint std::max_len_value(2096);
        };
        property documentStatus: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property documentType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property externalId: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property tag: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type EnumerationOptions {
        property code: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property color: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property disabled: std::bool;
        property domainName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property enumerationName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property icon: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property isDefault: std::bool;
        property optionLabel: std::str {
            constraint std::max_len_value(1500);
            constraint std::min_len_value(0);
        };
        property optionOrder: std::int64;
        property optionValue: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property orgUnitCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type Error {
        property field: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type EsignatureEnvelope {
        multi link documents: wealthdomain::Document {
            on target delete allow;
            constraint std::exclusive;
        };
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property envelopeStatus: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type EsignaturePositions {
        property datePageNumber: std::int64;
        property dateXPosition: std::int64;
        property dateYPosition: std::int64;
        property index: std::int64;
        property initialsPageNumber: std::int64;
        property initialsXPosition: std::int64;
        property initialsYPosition: std::int64;
        property namePageNumber: std::int64;
        property nameXPosition: std::int64;
        property nameYPosition: std::int64;
        property rowNumber: std::int64;
        property signPageNumber: std::int64;
        property signXPosition: std::int64;
        property signYPosition: std::int64;
        property signerType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::one_of('Primary', 'Advisor', 'Secondary');
        };
    };
    type Exchange {
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property custodianCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property exchangeCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type ExecutionHistory {
        multi link inputFiles: wealthdomain::ReceivedFile {
            on target delete allow;
            constraint std::exclusive;
        };
        multi link outputFiles: wealthdomain::OutputFile {
            on target delete allow;
            constraint std::exclusive;
        };
        multi link steps: wealthdomain::ExecutionHistoryStep {
            on target delete allow;
            constraint std::exclusive;
        };
        property asOfDate: cal::local_date;
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property executionTime: std::duration {
            constraint std::max_value(<std::duration>'23:59:59ms');
            constraint std::min_value(<std::duration>'00:00:00ms');
        };
        property jobName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property message: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property status: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property stepType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type ExecutionHistoryStep {
        multi link expectedFiles: wealthdomain::OutputFile {
            on target delete allow;
            constraint std::exclusive;
        };
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property executionTime: std::duration {
            constraint std::max_value(<std::duration>'23:59:59ms');
            constraint std::min_value(<std::duration>'00:00:00ms');
        };
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property message: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property status: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property stepName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property stepType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type ExpectedFile {
        property businessObject: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property domainName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property expectedDays: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property expectedTime: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property folder: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property frequency: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property namePattern: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property timeout: std::duration {
            constraint std::max_value(<std::duration>'23:59:59ms');
            constraint std::min_value(<std::duration>'00:00:00ms');
        };
    };
    type FeeSchedule {
        property discount: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property minimumFees: std::int64;
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property tier1: std::int64;
        property tier1Rate: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property tier2: std::int64;
        property tier2Rate: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property tier3: std::int64;
        property tier3Rate: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property tier4: std::int64;
        property tier4Rate: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property tier5: std::int64;
        property tier5Rate: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property tieredRate: std::bool;
        property topTierRate: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
    };
    type FinancialGoal {
        multi link accounts: wealthdomain::Account {
            on target delete allow;
            constraint std::exclusive;
        };
        link extRetirementGoal: wealthdomain::RetirementGoal {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link participants: wealthdomain::Person {
            on target delete allow;
            constraint std::exclusive;
        };
        link retirementState: wealthdomain::StateOrProvince {
            on target delete allow;
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property endYear: std::int64;
        property goalAmount: std::float64;
        property initialContribution: std::float64;
        property investmentModel: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property livingExpenses: std::float64;
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property recurringContribution: std::float64;
        property recurringContributionFrequency: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property recurringContributionRate: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property riskLevel: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property startYear: std::int64;
        property type: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type FinancialInstitution {
        multi link additionalRoutingNumbers: wealthdomain::RoutingNumber {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link address: wealthdomain::Address {
            on target delete allow;
            constraint std::exclusive;
        };
        link organizationalUnit: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        property bankCK2vyw: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bankCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property domesticWireRoutingNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property fax: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property internationalWireRoutingNumber: std::int64;
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property primaryPhoneNumber: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property secondaryPhoneNumber: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property swiftCode: std::int64;
    };
    type FormGenerationCriteria {
        link esignatureDetails: wealthdomain::EsignaturePositions {
            on target delete allow;
            constraint std::exclusive;
        };
        property client: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property displayOrder: std::int64;
        property docCategory: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property docTypeName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property domainModel: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property label: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property rawFile: std::str {
            constraint std::max_len_value(2096);
        };
        property serviceRequestLabel: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property uploadDocumentToCustodian: std::bool;
    };
    type FormsByRegistrationType {
        property conditions: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property custodian: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property form: std::str {
            constraint std::max_len_value(2096);
        };
        property formName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property formType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property registrationType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type FundingMethodTypes {
        property description: std::str {
            constraint std::max_len_value(2000);
            constraint std::min_len_value(0);
        };
        property fundingMethod: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property icon: std::str {
            constraint std::max_len_value(2096);
        };
        property sortOrder: std::int64;
    };
    type GenericErrorResponse {
        property data: std::str {
            constraint std::max_len_value(2000);
            constraint std::min_len_value(0);
        };
        property error: std::str {
            constraint std::max_len_value(2000);
            constraint std::min_len_value(0);
        };
    };
    type GetRCHKResponse {
        property accountNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property accountType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property alternateNameAndAddressOrigin: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property approver1Date: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property approver1Initials: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property approver1WhoCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property approver2Date: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property approver2Initials: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property approver2WhoCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property approver3Date: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property approver3Initials: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property approver3WhoCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property asOfFuturePayDate: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property assignedWirePrinterId: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property autoAlignmentSwitch: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bankNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property branchPrintSwitch: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property branchRepSeparationBranch: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property cashStandingInstructionCodes: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property checkApprovalOverride: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property checkInstructions1: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property checkInstructions2: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property checkNextBusinessDate: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property checkPrintedBranch: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property checkPrintedDate: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property checkPrinterDescription: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property checkPrinterFeedSettings: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property checkPrinterId: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property checkPrinterStatus: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property checkPurpose: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property checkRequestDate: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property checkStatusCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property checkSystemType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property checkType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property controlNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property departmentCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property detailSourceCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property federalTaxWithholdingPercentage: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property federalWithholdingTypeCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property fifthNameAndAddressLine: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property firmDefinedGlopProfileCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property firstNameAndAddressLine: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property fourthNameAndAddressLine: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property historicalStatusIndicator: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property itemNumberOfPayeeInstructions: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property lastCheckNumberPrinted: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property lastUpdateDate: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property lastUpdatedDepartmentCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property marginStandingInstructionCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property messageFromApprover1: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property messageFromApprover2: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property messageToApprover1: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property messageToApprover2: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property mmfSymbol: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property originatorInitials: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property portionOfCheckAmount: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property rejectorWhoCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property repCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property requestUpdateInitials: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property reservedForFutureUse: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property rowIdentifier: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property secondNameAndAddressLine: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property sequenceNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property sixthNameAndAddressLine: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property sourceCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property stateTaxWithholdingPercentage: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property stateWithholdingTypeCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property subfirm: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property taxId: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property thirdNameAndAddressLine: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property transactionReferenceId: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property typeOfPayee: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property uniqueTimestamp: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property whoCodeOfUserPrintedCheck: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property wireNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type Holdings {
        property nonQualifiedValue: std::float64;
        property qualifiedValue: std::float64;
        property type: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type IndexedAnnuityCreditingStrategy {
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property currentRate: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property interestCreditingStrategy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property interestRateMargin: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property minimumCapRate: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property participationRate: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
    };
    type InterestRateChange {
        property rateChangeTrigger: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property triggerRateFactor: std::int64;
        property triggerRateVariation: std::int64;
    };
    type InvestmentProgramType {
        property code: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type IsCompleted;
    type J_Transaction {
        link account: wealthdomain::Account {
            on target delete allow;
        };
        link ouLevel0: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel1: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel2: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel3: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel4: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel5: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel6: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link security: wealthdomain::Security {
            on target delete allow;
        };
        property accountNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property amount: std::float64;
        property blotterCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property branchOrOfficeID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property cancelCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property category: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property categorySource: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property checkOrTradeTicketNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property code: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property commission: std::float64;
        property contributionOrWithdrawal: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property creditOrDebit: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property currencyCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property cusip: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property custodianAssignedSecurityID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property custodianCharge: std::float64;
        property custodianName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property custodianRepCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property dealerCommissionRate: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property enteredBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property feeAmount: std::float64;
        property initialSourceOfFunds: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property intermediary: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property intraDayTimestamp: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property isPhysical: std::bool;
        property isSolicited: std::bool;
        property isTradeTransaction: std::bool;
        property isin: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property journalInOrOut: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property longDescription: std::str {
            constraint std::max_len_value(2000);
            constraint std::min_len_value(0);
        };
        property marketCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property merchant: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property merchantType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property mutualFundValues: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property orderType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property originalCommission: std::float64;
        property postDate: cal::local_date;
        property price: std::float64;
        property principal: std::float64;
        property processedDate: cal::local_date;
        property quantity: std::float64;
        property recordSource: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property repCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property runningBalaJe4tm: std::float64;
        property runningBalance: std::float64;
        property securityDescription: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property sedol: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property settlementDate: cal::local_date;
        property shortDescription: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property status: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property symbol: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property tradeDate: cal::local_date;
        property transactionCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property transactionDate: cal::local_date {
            constraint std::max_value(<cal::local_date>'2115-12-31');
            constraint std::min_value(<cal::local_date>'1900-01-01');
        };
        property transactionID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property transactionRecordSource: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property transactionType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property valoren: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type KeyValuePair {
        property key: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property value: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type KyCInfo {
        property asOfDate: cal::local_date;
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property kyCStatus: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property kyCVerificationType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type Liabilities {
        property type: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property value: std::float64;
    };
    type MarginInterest {
        link account: wealthdomain::Account {
            on target delete allow;
        };
        property asOfDate: cal::local_date;
        property branchMarginInterest: std::float64;
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property interest: std::float64;
        property isBulkPost: std::bool;
        property marginMTD: std::float64;
        property postDate: cal::local_date;
        property postUserCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type MarginRates {
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property rangeMaximum: std::float64;
        property rangeMinimum: std::float64;
        property rate: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property rateDelta: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property rateDeltaIsPositive: std::bool;
    };
    type MarginRequirements {
        link orgUnit: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        property asOfDate: cal::local_date;
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property category: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property firmMarketValueRequired: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property firmPrincipalRequired: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property maintenancePoints: std::float64;
        property marginCallThreshold: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property priceBreak: std::float64;
        property regulationTMarketValueRequired: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property regulationTPrincipalRequired: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
    };
    type MultiAccountBuilder {
        multi link accountCreationList: wealthdomain::AccountBuilder {
            on target delete allow;
            constraint std::exclusive;
        };
    };
    type MultiAccountCreation {
        multi link accountCreationList: wealthdomain::AccountCreation {
            on target delete allow;
            constraint std::exclusive;
        };
    };
    type NoteResponse {
        property accountNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property addTimestamp: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property alphaKey: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property changeDateCYMD: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property changeWhoCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property effectiveDateCYMD: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property note: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property padType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type OnlineAccountSecurityQA {
        property answer: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property question: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type OnlineAccountSecurityQuestions {
        property enabled: std::bool;
        property question: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type OnlineAccountSetup {
        multi link accountsToLink: wealthdomain::Account {
            on target delete allow;
            constraint std::exclusive;
        };
        link person: wealthdomain::Person {
            on target delete allow;
        };
        multi link securityQuestionsAndAnswers: wealthdomain::OnlineAccountSecurityQA {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property firstChoiceForUserID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property secondChoiceForUserID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type OrgUnitAccountBalances {
        link orgUnit: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel0: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel1: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel2: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel3: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel4: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel5: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel6: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        property beginningAccounts: std::int64;
        property beginningBuyingPower: std::float64;
        property beginningCashBalance: std::float64;
        property beginningEts: std::float64;
        property beginningMarginBalance: std::float64;
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property closedAccounts: std::int64;
        property contributions: std::float64;
        property endingAccounts: std::int64;
        property endingBuyingPower: std::float64;
        property endingCashBalance: std::float64;
        property endingEts: std::float64;
        property endingMarginBalance: std::float64;
        property newAccounts: std::int64;
        property periodEndDate: cal::local_date;
        property periodStartDate: cal::local_date;
        property periodType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property withdrawals: std::float64;
    };
    type OrgUnitPositions {
        link orgUnit: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel0: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel1: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel2: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel3: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel4: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel5: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link ouLevel6: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
        link security: wealthdomain::Security {
            on target delete allow;
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property marketValue: std::float64;
        property numberOfAccounts: std::int64;
        property numberOfShares: std::int64;
        property periodEndDate: cal::local_date;
        property securityCategory := (.security.securityType.category);
    };
    type OrgUnitRelation {
        link childUnit: wealthdomain::OrganizationalUnit {
            on target delete allow;
            constraint std::exclusive;
        };
        link parentUnit: wealthdomain::OrganizationalUnit {
            on target delete allow;
        };
    };
    type OrgUnitType {
        property level: std::int64;
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type OrganizationalUnit {
        link address: wealthdomain::Address {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link childUnits: wealthdomain::OrgUnitRelation {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        property alternateEmail: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
            constraint std::regexp(r"^[a-zA-Z0-9.!#$%&'*+\=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$");
        };
        property billingCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property code: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property omsId: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property parentCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property primaryEmail: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
            constraint std::regexp(r"^[a-zA-Z0-9.!#$%&'*+\=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$");
        };
        property primaryPhoneNumber: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property secondaryPhoneNumber: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property taxID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property type: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type OutputFile {
        multi link expectedFiles: wealthdomain::ExpectedFile {
            on target delete allow;
            constraint std::exclusive;
        };
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property domainName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property fileName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property isNIGO: std::bool;
        property j_Size: std::int64;
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property rows: std::int64;
        property targetBusinessObject: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type Person {
        link accreditedInvestor: wealthdomain::RegulatoryDisclosure {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link alternateMailingAddress: wealthdomain::Address {
            on target delete allow;
            constraint std::exclusive;
        };
        multi link assets: wealthdomain::Assets {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link associatedWithBrokerDealer: wealthdomain::RegulatoryDisclosure {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link associatedWithInvestmentAdvisor: wealthdomain::RegulatoryDisclosure {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link associatedWithOtherBrokerDealer: wealthdomain::RegulatoryDisclosure {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link beneficiaries: wealthdomain::Beneficiary {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link contingentBeneficiaries: wealthdomain::Beneficiary {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link countryOfCitizenship: wealthdomain::Country {
            on target delete allow;
        };
        link countryOfResidence: wealthdomain::Country {
            on target delete allow;
        };
        link employerAddress: wealthdomain::Address {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link foreignOfficial: wealthdomain::RegulatoryDisclosure {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link governingStateLawForTrust: wealthdomain::StateOrProvince {
            on target delete allow;
        };
        multi link grantor: wealthdomain::PersonRelation {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link holdings: wealthdomain::Holdings {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link kyCInfo: wealthdomain::KyCInfo {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link legalAddress: wealthdomain::Address {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link liabilities: wealthdomain::Liabilities {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link mailingAddress: wealthdomain::Address {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link otherDocuments: wealthdomain::Document {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link previousLegalAddress: wealthdomain::Address {
            on target delete allow;
            constraint std::exclusive;
        };
        link proofOfAddress: wealthdomain::Document {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link proofOfIdentity: wealthdomain::ProofOfIdentity {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link proofOfIncome: wealthdomain::Document {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link publicCompanyOfficial: wealthdomain::RegulatoryDisclosure {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link regulatoryDisclosuresV0: wealthdomain::RegulatoryDisclosureV0 {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link relatedPersons: wealthdomain::PersonRelation {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link relatedToPublicCompanyOfficial: wealthdomain::RegulatoryDisclosure {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link revoker: wealthdomain::PersonRelation {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link secondCountryOfCitizenship: wealthdomain::Country {
            on target delete allow;
        };
        link securitiesIndustryAffiliation: wealthdomain::RegulatoryDisclosure {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link securityQuestionsAndAnswers: wealthdomain::OnlineAccountSecurityQA {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link spouse: wealthdomain::PersonRelation {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link successorTrustee: wealthdomain::PersonRelation {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link trustee: wealthdomain::PersonRelation {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        property alias: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property alternateEmail: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
            constraint std::regexp(r"^[a-zA-Z0-9.!#$%&'*+\=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$");
        };
        property annualExpenses: std::float64;
        property annualIncome: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property annualIncomeExact: std::float64;
        property backupWithholdingExemptPayeeCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property beneficiariesAreNaturalPersons: std::bool;
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property businessPhoneNumber: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property citizenshipStatus: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property customerFileID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property dateOfBirth: cal::local_date;
        property dateOfDeath: cal::local_date;
        property ein: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property employer: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property employerPhoneNumber: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property employmentDate: cal::local_date;
        property employmentStatus: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property exemptFromBackupWithholding: std::bool;
        property faTCAReportingExemptionCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property federalMarginalTaxRate: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property firstName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::regexp("^[a-zA-Z '.-]*$");
        };
        property fullDisplayName := ((.fullName ?? (((.firstName ?? '') ++ ((' ' ++ .middleName) ?? '')) ++ (((' ' ++ .lastName) ++ ' ') ?? ''))));
        property fullName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property gender: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property homeOwnership: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property investmentExperience: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property investmentExperienceAlternatives: std::int64;
        property investmentExperienceAlternativesTransact: std::str;
        property investmentExperienceAnnuities: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property investmentExperienceAnnuitiesTransaction: std::str;
        property investmentExperienceDate: cal::local_date;
        property investmentExperienceDirectedParticipa5e2dc: std::str;
        property investmentExperienceDirectedParticipatio: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property investmentExperienceEquities: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property investmentExperienceEquitiesTransactions: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property investmentExperienceFixedAnnuities: std::int64;
        property investmentExperienceFixedIncome: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property investmentExperienceFixedIncomeTransacti: std::str;
        property investmentExperienceFutures: std::int64;
        property investmentExperienceFuturesTransactions: std::str;
        property investmentExperienceLevelAlternatives: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property investmentExperienceLevelAnnuities: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property investmentExperienceLevelDirectedPartici: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property investmentExperienceLevelEquities: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property investmentExperienceLevelFixedAnnuities: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property investmentExperienceLevelFixedIncome: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property investmentExperienceLevelFutures: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property investmentExperienceLevelManagedMoney: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property investmentExperienceLevelMutualFunds: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property investmentExperienceLevelOptions: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property investmentExperienceLevelREIT: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property investmentExperienceLevelRealEstate: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property investmentExperienceLevelVariableAnnuiti: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property investmentExperienceManagedMoney: std::int64;
        property investmentExperienceMargin: std::int64;
        property investmentExperienceMarginTransactions: std::str;
        property investmentExperienceMutualFunds: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property investmentExperienceMutualFundsTransacti: std::str;
        property investmentExperienceOptions: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property investmentExperienceOptionsTransactions: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property investmentExperienceREIT: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property investmentExperienceREITTransactions: std::int64;
        property investmentExperienceRealEstate: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property investmentExperienceRealEstateTransactio: std::str;
        property investmentExperienceVariableAnnuities: std::int64;
        property isClientRecord: std::bool;
        property isResidingInCommunityPropertyState: std::bool;
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property lastName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::regexp("^[a-zA-Z '.-]*$");
        };
        property legalAddressIsMailingAddress: std::bool {
            default := true;
        };
        property legalAddressLengthOfStay: std::str {
            default := 'Greater than six months';
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property legalAddressStartDate: cal::local_date;
        property liquidAssets: std::str {
            constraint std::max_len_value(30);
            constraint std::min_len_value(0);
        };
        property liquidAssetsExact: std::float64;
        property maritalStatus: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property maskedSSNOrTaxID := (('xxx-xx-' ++ wealthdomain::substring(.ssNOrTaxID, (wealthdomain::stringLength(.ssNOrTaxID) - 4), wealthdomain::stringLength(.ssNOrTaxID))));
        property middleName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::regexp("^[a-zA-Z '.-]*$");
        };
        property natureOfBusiness: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property netWorthExcludingHome: std::str;
        property netWorthExcludingHomeExact: std::float64;
        property numberOfDependents: std::int64;
        property occupation: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property ofACReportingExempted: std::bool;
        property personType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property powersOfTrustee: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property preferredName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::regexp("^[a-zA-Z '.-]*$");
        };
        property primaryEmail: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
            constraint std::regexp(r"^[a-zA-Z0-9.!#$%&'*+\=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$");
        };
        property primaryPhoneIsMobile: std::bool;
        property primaryPhoneNumber: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property profilePicture: std::str {
            constraint std::max_len_value(2096);
        };
        property providerAssignedID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property recordSource: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property recordSourceAssignedID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property secondaryPhoneIsMobile: std::bool;
        property secondaryPhoneNumber: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property securityQuestion1Answer: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property securityQuestion2Answer: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property securityQuestion3Answer: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property securityQuestion4Answer: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property securityQuestion5Answer: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property specialExpenses: std::float64;
        property ssNOrTaxID: std::str {
            constraint std::max_len_value(11);
            constraint std::min_len_value(11);
            constraint std::regexp(r'^(?!(000|666))\d{3}-(?!00)\d{2}-(?!0000)\d{4}$');
        };
        property suffix: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property taxClassification: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property taxExemptionStatus: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property taxIDType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property title: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property titleAtEmployer: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property totalAssets: std::float64;
        property totalLiabilities: std::float64;
        property totalNetWorth := ((.totalAssets - .totalLiabilities));
        property trustAmendmentDate: cal::local_date;
        property trustIsDulyOrganized: std::bool;
        property trustType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property trusteesAreNaturalPersons: std::bool;
        property trusteesCanActIndividually: std::bool;
        property withholdingOptions: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property yeMployed: std::int64;
    };
    type PersonRelation {
        link sourcePerson: wealthdomain::Person {
            on target delete allow;
            constraint std::exclusive;
        };
        link targetPerson: wealthdomain::Person {
            on target delete allow;
            constraint std::exclusive;
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property ownershipPercentage: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property relationship: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property tradingAuthority: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
    };
    type Position {
        link account: wealthdomain::Account {
            on target delete allow;
        };
        link security: wealthdomain::Security {
            on target delete allow;
        };
        property accruedAmount: std::float64;
        property annuityProvider: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property asOfDate: cal::local_date;
        property blendedUnitCost: std::float64;
        property bondCallType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bondFactor: std::float64;
        property bondType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property callOrPut: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property contractNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property contractValue: std::float64;
        property costBasis: std::float64;
        property couponRate: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property cusip: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property custodianAssignedSecurityID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property dividendRate: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property duration: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property expiryDate: cal::local_date;
        property firstCouponDate: cal::local_date;
        property held: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property instrumentType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property intraDayPriceChange: std::float64;
        property intraDayTimestamp: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property isMarginable: std::bool;
        property isin: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property lastSettlementDate: cal::local_date;
        property lastTradeDate: cal::local_date;
        property location: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property marketPrice: std::float64;
        property marketValue: std::float64;
        property marketValueInOriginalCurrency: std::float64;
        property marketValueOnSettlementDate: std::float64;
        property maturityDate: cal::local_date;
        property optionType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property originalCurrencyCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property parValue: std::float64;
        property priceDate: cal::local_date;
        property purchaseAmount: std::float64;
        property purchaseDate: cal::local_date;
        property purchasePrice: std::float64;
        property quantity: std::float64;
        property securityCategory := (.security.securityType.category);
        property sedol: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property strikePrice: std::float64;
        property symbol: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property term: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property totalPremium: std::float64;
        property totalQuantity: std::decimal;
        property underlyingSymbol: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property underlyingSymbolPrice: std::float64;
        property unitCost: std::float64;
        property unrealizedGainLoss: std::float64;
        property valoren: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property yieldToCall: std::float64;
        property yieldToMaturity: std::float64;
    };
    type Product {
        multi link features: wealthdomain::ProductFeatures {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link productCategory: wealthdomain::ProductCategory {
            on target delete allow;
        };
        link provider: wealthdomain::ProductProvider {
            on target delete allow;
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property category: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property code: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property image: std::str {
            constraint std::max_len_value(2096);
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property rating: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property subCategory: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type ProductCategory {
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property category: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property code: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property domain: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property image: std::str {
            constraint std::max_len_value(2096);
        };
        property subDomain: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type ProductFeatures {
        link feature: wealthdomain::Product {
            on target delete allow;
        };
    };
    type ProductProvider {
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property code: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property image: std::str {
            constraint std::max_len_value(2096);
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type ProofOfIdentity {
        link document: wealthdomain::Document {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link issuingCountry: wealthdomain::Country {
            on target delete allow;
        };
        link issuingState: wealthdomain::StateOrProvince {
            on target delete allow;
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property expiryDate: cal::local_date;
        property idNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property issueDate: cal::local_date;
        property issuingStateOrProvince: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property type: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type ReceivedFile {
        link expectedFile: wealthdomain::ExpectedFile {
            on target delete allow;
            constraint std::exclusive;
        };
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property fileName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property j_Size: std::int64;
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property niGOFileName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property rows: std::int64;
    };
    type RecordSource {
        property code: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property priority: std::int64;
    };
    type RegistrationType {
        link custodian: wealthdomain::Custodian {
            on target delete allow;
        };
        property applicableTo: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property category: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property code: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property custodianCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property enabled: std::bool;
        property image: std::str {
            constraint std::max_len_value(2096);
        };
        property instructions: std::str {
            constraint std::max_len_value(2000);
            constraint std::min_len_value(0);
        };
        property isCoveredByERISA: std::bool;
        property isRetirement: std::bool;
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property sortOrder: std::int64;
    };
    type RegistrationTypeGroup {
        multi link registrationTypes: wealthdomain::RegistrationType {
            on target delete allow;
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type RegulatoryDisclosure {
        link firmAddress: wealthdomain::Address {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link foreignCountry: wealthdomain::Country {
            on target delete allow;
        };
        link regulatoryDisclosureOption: wealthdomain::RegulatoryDisclosureOption {
            on target delete allow;
        };
        property affiliationType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property enabled: std::bool;
        property firmNameForEmployee: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property firmNameForOfficer: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property firmTickerForOfficer: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property foreignCountryName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property nameOfEmployee: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property nameOfForeignOfficial: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property nameOfIndividual: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property officeHeldWithForeignGovt: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property relationshipOfEmployee: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property relationshipOfOfficer: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property typeOfEmployer: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type RegulatoryDisclosureOption {
        property disclosureType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property enabled: std::bool;
        property label: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type RegulatoryDisclosureV0 {
        link foreignCountry: wealthdomain::Country {
            on target delete allow;
        };
        property directorOrOfficerInPublicCompany: std::bool;
        property employedBySecurityIndustryEntity: std::bool;
        property firmNameForEmployee: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property firmNameForOfficer: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property firmTickerForOfficer: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property foreignCountryName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property nameOfEmployee: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property nameOfForeignOfficial: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property nameOfIndividual: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property officeHeldWithForeignGovt: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property officerRole: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property relationshipOfEmployee: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property relationshipOfOfficer: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property seniorMilitaryGovernmentOrPoliticalOffic: std::bool;
        property typeOfEmployer: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type RelatedAccountResponse {
        property accountNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property primaryAcctBranch: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property primaryAcctChangeDate: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property primaryAcctHomePhone: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property primaryAcctNameAddr1: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property primaryAcctNameAddr2: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property primaryAcctNameAddr3: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property primaryAcctNameAddr4: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property primaryAcctNameAddr5: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property primaryAcctRep: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property primaryAcctTaxId: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property sub: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type RepCode {
        multi link associates := (.<repCodes[is wealthdomain::Associate]);
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property isSplit: std::bool;
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property parentCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property repCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property repName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property repNameAndCode := (((.repName ++ ' | ') ++ .repCode));
        property source: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type RepCodeAccountBalances {
        link repCode: wealthdomain::RepCode {
            on target delete allow;
        };
        property beginningAccounts: std::int64;
        property beginningAssets: std::float64;
        property beginningBuyingPower: std::float64;
        property beginningCashBalance: std::float64;
        property beginningMarginBalance: std::float64;
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property closedAccounts: std::int64;
        property contributions: std::float64;
        property endingAccounts: std::int64;
        property endingAssets: std::float64;
        property endingBuyingPower: std::float64;
        property endingCashBalance: std::float64;
        property endingMarginBalance: std::float64;
        property marketAppreciation: std::float64;
        property newAccounts: std::int64;
        property periodEndDate: cal::local_date;
        property periodStartDate: cal::local_date;
        property periodType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property withdrawals: std::float64;
    };
    type RepCodeSplit {
        link sourceRepCode: wealthdomain::RepCode {
            on target delete allow;
            constraint std::exclusive;
        };
        link targetRepCode: wealthdomain::RepCode {
            on target delete allow;
            constraint std::exclusive;
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property splitPercentage: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
    };
    type RepPositions {
        link repCode: wealthdomain::RepCode {
            on target delete allow;
        };
        link security: wealthdomain::Security {
            on target delete allow;
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property marketValue: std::float64;
        property numberOfAccounts: std::int64;
        property numberOfShares: std::int64;
        property periodEndDate: cal::local_date;
    };
    type RequiredDocument {
        property code: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property documentTypeName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property sendDocumentToAXOS: std::bool;
    };
    type RequriedDocumentsCriteria {
        link documentType: wealthdomain::RequiredDocument {
            on target delete allow;
        };
        multi link fundingMethodInfo: wealthdomain::FundingMethodTypes {
            on target delete allow;
        };
        multi link registrationTypeInfo: wealthdomain::RegistrationType {
            on target delete allow;
        };
        multi property criteria: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::one_of('Required for registration type', 'Required for funding method', 'Required for funding method for a registration type');
        };
    };
    type ResourceFilterTypes {
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property label: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type RetirementGoal {
        property livingExpensesInRetirement: std::float64;
        property mortgagePaidOffByRetirement: std::bool;
        property retireWithSpouse: std::bool;
        property retirementAge: std::int64;
        property retirementLifestyle: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type RetirementPlanSummary {
        link account: wealthdomain::Account {
            on target delete allow;
            constraint std::exclusive;
        };
        property asOfDate: cal::local_date;
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property corrected1099Status: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property corrected5498Status: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property correctedFMVStatementStatus: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property currentEndOfYearMarketValue: std::float64;
        property distributionSource: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property eligibleForFeeDiscounts: std::bool;
        property federalWithholdingPercentage: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property feeSchedule: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property feesPaid: std::bool;
        property isParticipantDeceased: std::bool;
        property isPooledPlan: std::bool;
        property isPrimary: std::bool;
        property lastChangeDate: cal::local_date;
        property lastChangeTerminal: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property lastChangedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property overrideMarketValue: std::bool;
        property planClass: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property previousEndOfYearMarketValue: std::float64;
        property relatedAccountNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property skipFees: std::bool;
        property skipGenerating1099R: std::bool;
        property skipGenerating5498: std::bool;
        property skipGeneratingFMVStatement: std::bool;
        property stateWithholdingPercentage: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property terminationReason: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type RoutingNumber {
        multi link state: wealthdomain::StateOrProvince {
            on target delete allow;
            constraint std::exclusive;
        };
        property routingNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type SecondaryOwners;
    type SecuritiesTransferSecurity {
        property amount: std::float64;
        property capitalGainsOption: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property cusip: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property dividendOption: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property fundAccountNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property mutualFundTransferOption: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property quantity: std::decimal;
        property symbol: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property transferAll: std::bool;
        property transferUnits: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type SecuritiesTransferSourceOrReceiver {
        multi link accountOwners: wealthdomain::Person {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link firmAddress: wealthdomain::Address {
            on target delete allow;
        };
        link payeeAddress: wealthdomain::Address {
            on target delete allow;
        };
        link registrationType: wealthdomain::RegistrationType {
            on target delete allow;
        };
        property accountHolderAlternateName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property accountNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property accountTitle: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property additionalInformation: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property clearingNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property deliveringAccountTitleSameAsReceiving: std::bool;
        property deliveryMethod: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property firmName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property firmPhoneNumber: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property intermediaryBank: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property payeeAddressType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property payeeIsSender: std::bool;
        property payeeName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property payeePhoneNumber: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
        };
        property payeeRelationshipType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type Security {
        index fts::index on ((fts::with_options(.symbol, language := fts::Language.eng), fts::with_options(.securityDescription, language := fts::Language.eng), fts::with_options(.custodianAssignedID, language := fts::Language.eng)));
        link product: wealthdomain::Product {
            on target delete allow;
        };
        link securityType: wealthdomain::SecurityType {
            on target delete allow;
        };
        property assetClass: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bondClass: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property callIndicator: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property closedEnd: std::bool;
        property closedToBuys: std::bool;
        property closedToNewInvestors: std::bool;
        property closedToSells: std::bool;
        property countryCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property couponRate: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property cusip: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property custodianAssignedID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property dividendFrequency: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property dividendOrInterestPaymentMethod: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property dividendReinvestEligible: std::bool;
        property dividendYield: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property dtCCEligible: std::bool;
        property endOfMonthPrice: std::float64;
        property endOfMonthPriceDate: cal::local_date;
        property etFIndicator: std::bool;
        property exchange: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property expenseRatio: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property factorDate: cal::local_date;
        property foreignSecurityIndicator: std::bool;
        property fundFamilyCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property fundFamilyName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property fundServIndicator: std::bool;
        property fundShareClass: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property fundType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property fundVestIndicator: std::bool;
        property interestCalculation: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property interestFrequency: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property isVariableRate: std::bool;
        property isin: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property issuer: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property issuingCurrency: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property lastPrice: std::float64;
        property lastPriceDate: cal::local_date;
        property leveragedPercentage: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property maturityOrExpirationDate: cal::local_date;
        property minorProductCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property moodysBondRating: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property optionExpiryDate: cal::local_date;
        property paymentDelayDays: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property poolFactor: std::float64;
        property previousDayPrice: std::float64;
        property previousFactor: std::float64;
        property previousFactorDate: cal::local_date;
        property previousPriceDate: cal::local_date;
        property productCodeName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property recordSource: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property reinvestCapitalGains: std::bool;
        property reinvestDividends: std::bool;
        property securityCalculationCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property securityCategory := (.securityType.category);
        property securityDescription := ((((((((((((.securityDescription1 ?? '') ++ ' ') ++ (.securityDescription2 ?? '')) ++ ' ') ++ (.securityDescription3 ?? '')) ++ ' ') ++ (.securityDescription4 ?? '')) ++ ' ') ++ (.securityDescription5 ?? '')) ++ ' ') ++ (.securityDescription6 ?? '')));
        property securityDescription1: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property securityDescription2: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property securityDescription3: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property securityDescription4: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property securityDescription5: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property securityDescription6: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property securityModifier: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property sedol: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property siCCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property strikePrice: std::float64;
        property structuredProductIndicator: std::bool;
        property symbol: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property underlyingSecurityNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property valoren: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property worthlessSecurityIndicator: std::bool;
    };
    type SecurityRestriction {
        link security: wealthdomain::Security {
            on target delete allow;
        };
        property asOfDate: cal::local_date;
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property dateAdded: cal::local_date;
        property errorLevel: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property restriction: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type SecurityType {
        link custodian: wealthdomain::Custodian {
            on target delete allow;
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property category: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property code: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property custodianCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type SecurityTypeCustodianMapping {
        link custodian: wealthdomain::Custodian {
            on target delete allow;
        };
        link securityType: wealthdomain::SecurityType {
            on target delete allow;
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property code: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type Signature {
        property emailID: std::str {
            constraint std::max_len_value(50);
            constraint std::min_len_value(5);
            constraint std::regexp(r"^[a-zA-Z0-9.!#$%&'*+\=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$");
        };
        property role: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property routingOrder: std::int64;
        property signatory: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property status: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type SrAdditionalInfo {
        property info1: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property info10: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property info11: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property info12: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property info13: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property info14: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property info15: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property info2: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property info3: std::str {
            constraint std::max_len_value(5000);
            constraint std::min_len_value(0);
        };
        property info4: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property info5: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property info6: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property info7: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property info8: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property info9: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type SrCategory {
        multi link subCategory: wealthdomain::SrSubCategory {
            on target delete allow;
            constraint std::exclusive;
        };
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property rank: std::int64;
    };
    type SrDefinition {
        link category: wealthdomain::SrCategory {
            on target delete allow;
        };
        link mergeReadQuery: wealthdomain::SrQuery {
            on target delete allow;
            constraint std::exclusive;
        };
        link subCategory: wealthdomain::SrSubCategory {
            on target delete allow;
        };
        multi link tasks: wealthdomain::SrTaskDef {
            on target delete allow;
            constraint std::exclusive;
        };
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property priority: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::one_of('1', '2', '3');
        };
        property rootBusinessObject: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property storyID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property validationRule: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property workflowDefID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type SrInstance {
        link additionalInfo: wealthdomain::SrAdditionalInfo {
            on target delete allow;
            constraint std::exclusive;
        };
        link currentTask: wealthdomain::SrTask {
            on target delete allow;
        };
        multi link documents: wealthdomain::Document {
            on target delete allow;
            constraint std::exclusive;
        };
        multi link notes: wealthdomain::SrNote {
            on target delete allow;
            constraint std::exclusive;
        };
        link srDef: wealthdomain::SrDefinition {
            on target delete allow;
        };
        multi link tasks: wealthdomain::SrTask {
            on target delete allow;
        };
        property accountID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property accountNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property advisorID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property afterCommit: std::str {
            constraint std::max_len_value(200000);
            constraint std::min_len_value(0);
        };
        property beforeCommit: std::str {
            constraint std::max_len_value(200000);
            constraint std::min_len_value(0);
        };
        property boInstanceID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property clientID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property clientName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property closedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property elapsedDays := ((wealthdomain::differenceInDays(.closedAt, .createdAt) ?? wealthdomain::differenceInDays(wealthdomain::now(), .createdAt)));
        property filterValue: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property repCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property sparseObject: std::str {
            constraint std::max_len_value(100000);
            constraint std::min_len_value(0);
        };
        property srDefinitionType := (.srDef.name);
        property srId := (('SR' ++ wealthdomain::padStart(wealthdomain::toString(.srNumber), 6, '0')));
        property srNumber: wealthdomain::SrInstance_srNumber_sequence;
        property workflowID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type SrNote {
        link srInstanceNotes := (.<notes[is wealthdomain::SrInstance]);
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        multi property documents: std::str {
            constraint std::max_len_value(2096);
        };
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property note: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type SrQuery {
        property domain: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property domainName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property entityID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property entityLabel: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property entityName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property operationID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property queryName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property queryText: std::str {
            constraint std::max_len_value(200000);
            constraint std::min_len_value(0);
        };
        property serviceID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type SrStateDef {
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property isFinal: std::bool;
        property isStart: std::bool;
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property stateId: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type SrStatus {
        multi link srTaskStatus := (.<status[is wealthdomain::SrTask]);
        link status: wealthdomain::SrStatusCode {
            on target delete allow;
        };
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type SrStatusCode {
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property isFinal: std::bool;
        property isStart: std::bool;
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property stateId: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type SrSubCategory {
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property rank: std::int64;
    };
    type SrTask {
        link assignedTo: wealthdomain::Associate {
            on target delete allow;
        };
        link currentStatus: wealthdomain::SrStatus {
            on target delete allow;
        };
        multi link signatures: wealthdomain::Signature {
            on target delete allow;
            constraint std::exclusive;
        };
        multi link srInstanceTasks := (.<tasks[is wealthdomain::SrInstance]);
        multi link status: wealthdomain::SrStatus {
            on target delete allow;
        };
        property actualTime: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property esignatureEnvelopeID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property estimatedTime: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property response: std::str {
            constraint std::max_len_value(10000);
            constraint std::min_len_value(0);
        };
        property sequenceID: wealthdomain::SrTask_sequenceID_sequence;
        property signalID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property taskDefID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property workflowID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type SrTaskDef {
        multi link status: wealthdomain::SrStatusCode {
            on target delete allow;
            constraint std::exclusive;
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property taskId: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type SrWorkflowArgs {
        link errors: wealthdomain::Error {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        property assignTo: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property boInstanceID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property data: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property isCompleted: std::bool;
        property preview: std::bool;
        property srDefID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property srInstanceID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property taskStatus: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property validate: std::bool;
    };
    type StandingInstructionsResponse {
        property bankAccountNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bankAccountOwnersName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bankAccountType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bankName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bankRoutingNumber: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property instructionStatus: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type StateOrProvince {
        link country: wealthdomain::Country {
            on target delete allow;
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property code: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type StepVisibilityCriteria {
        link registrationGroup: wealthdomain::RegistrationTypeGroup {
            on target delete allow;
        };
        multi link step: wealthdomain::AccountCreationStep {
            on target delete allow;
        };
        property custodian: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type SupportedRegistrationTypes {
        property code: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property isAvailable: std::bool;
    };
    type SupportingDocuments {
        link registrationTypeInfo: wealthdomain::RegistrationType {
            on target delete allow;
        };
        property clientName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property documentTypeName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type Task {
        link account: wealthdomain::Account {
            on target delete allow;
        };
        link assignedTo: wealthdomain::Associate {
            on target delete allow;
            constraint std::exclusive;
        };
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property createdBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property elapsedDays: std::int64;
        property lastModifiedAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property priority: std::int64;
        property priorityText := (('Highest' if (.priority ?= 1) else ('High' if (.priority ?= 2) else ('Medium' if (.priority ?= 3) else ('Low' if (.priority ?= 4) else 'Medium')))));
        property repCode: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property status: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property statusMessage: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type TaxLot {
        link account: wealthdomain::Account {
            on target delete allow;
        };
        link currency: wealthdomain::Currency {
            on target delete allow;
        };
        link security: wealthdomain::Security {
            on target delete allow;
        };
        property asOfDate: cal::local_date;
        property blendedUnitCost: std::float64;
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property closedDate: cal::local_date;
        property cusip: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property custodianAssignedSecurityID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property held: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property isClosed: std::bool;
        property isin: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property longTermRealizedGainOrLoss: std::float64;
        property longTermUnrealizedGainOrLoss: std::float64;
        property marketPrice: std::float64;
        property marketValue: std::float64;
        property openDate: cal::local_date;
        property quantity: std::float64;
        property sedol: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property shortTermRealizedGainOrLoss: std::float64;
        property shortTermUnrealizedGainOrLoss: std::float64;
        property symbol: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property taxLotID: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property term: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property totalCost: std::float64;
        property totalRealizedGainOrLoss: std::float64;
        property totalUnrealizedGainOrLoss: std::float64;
        property tradePrice: std::float64;
        property valoren: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type Templatedemail {
        multi property attachments: std::str;
        property data: std::str;
        property providerName: std::str {
            constraint std::min_len_value(0);
        };
        property templatePath: std::str {
            constraint std::min_len_value(0);
        };
    };
    type Transfer {
        link bankAccount: wealthdomain::AccountSourceOfFunds {
            on target delete allow;
        };
        link otherAccount: wealthdomain::SecuritiesTransferSourceOrReceiver {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        multi link securities: wealthdomain::SecuritiesTransferSecurity {
            on source delete delete target if orphan;
            on target delete allow;
            constraint std::exclusive;
        };
        link sender: wealthdomain::Person {
            on target delete allow;
            constraint std::exclusive;
        };
        link taxFilingState: wealthdomain::StateOrProvince {
            on target delete allow;
        };
        property accountHolderMeetsAgeRequirement: std::bool;
        property amount: std::float64;
        property bankAccountTransferType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        property cdMaturityDate: cal::local_date;
        property closeAccount: std::bool;
        property contributionYear: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property costBasisStepUp: std::bool;
        property createdAt: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
        property dateOfDeath: cal::local_date;
        property detailsToBeProvided: std::bool;
        property distributeSecurities: std::bool;
        property excessContributionAmount: std::float64;
        property excessContributionDate: cal::local_date;
        property excessContributionEarnings: std::float64;
        property federalWithholdingAmount: std::float64;
        property federalWithholdingPercent: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property frequency: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        multi property internalTransferAssetTypeOptions: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property internalTransferType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property irADistributionAmount: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property irADistributionFrequency: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property irADistributionReason: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property isForProductPurchase: std::bool;
        property isIRAContribution: std::bool;
        property isPriorYearExcessContribution: std::bool;
        property isRolloverWithin60Days: std::bool;
        property isThirdParty: std::bool;
        property lastModifiedBy: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property memo: std::str {
            constraint std::max_len_value(2000);
            constraint std::min_len_value(0);
        };
        property netAttributableIncome: std::float64;
        property notes: std::str {
            constraint std::max_len_value(2000);
            constraint std::min_len_value(0);
        };
        property optOutOfStateWithholding: std::bool;
        property ownerAddressType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property partialTransferAmount: std::float64;
        property partialTransferPercent: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property reCharacterizationYear: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property replaceExistingInstruction: std::bool;
        property requestSource: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property rolloverQuantityChoice: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property rothIRA5YearRequirementMet: std::bool;
        property securitiesTransferType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property siMPLEIRAOriginalFundingDate: cal::local_date;
        property specialDelivery: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property srId: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property standingInstruction: std::bool;
        property startDate: cal::local_date;
        property stateWithholdingAmount: std::float64;
        property stateWithholdingOption: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property stateWithholdingPercent: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property stateWithholdingPercentOfFederal: std::float64 {
            constraint std::max_value(<std::float64>'100');
            constraint std::min_value(<std::float64>'0');
        };
        property status: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property taxYear: std::int64;
        property transferType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property typeOfFunds: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property withholdingType: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type TransferStatusResponse {
        property messages: std::str {
            constraint std::max_len_value(2000);
            constraint std::min_len_value(0);
        };
        property requestId: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property sequence: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property status: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property timestamp: std::datetime {
            constraint std::max_value(<std::datetime>'2115-12-31T23:59:59Z');
            constraint std::min_value(<std::datetime>'1900-01-01T00:00:00Z');
        };
    };
    type UiToggleFields {
        property clientSelection: std::str {
            default := 'Search For a Client';
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::one_of('Search For a Client', 'Add New Client');
        };
        property summaryView: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
            constraint std::one_of('View Forms', 'Account Summary');
        };
    };
    type UserRepCodeMapping {
        property bulkLoadRecIdJfyApx: std::str;
        property bulkLoadRunIdJfyApx: std::str;
        multi property repCode: std::str;
        property userId: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type ValidationConfig {
        link rule: wealthdomain::ValidationRule {
            on target delete allow;
            constraint std::exclusive;
        };
        property enabled: std::bool;
        property override: std::bool;
    };
    type ValidationRule {
        property description: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property name: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property ruleset: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type WireCreateResponse {
        property requestId: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type WizardForm {
        property custodianName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property docCategory: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property docTypeName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property firmName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
    type WizardStep {
        property custodianName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property regTypeName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
        property stepName: std::str {
            constraint std::max_len_value(255);
            constraint std::min_len_value(0);
        };
    };
};
